{"ast":null,"code":"var _jsxFileName = \"/Users/mateusdavila/Desktop/code/intercambio/front/src/components/toDoList/ToDoListPage.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'; // fake data generator\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getItems = function (count) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Array.from({\n    length: count\n  }, (v, k) => k).map(k => ({\n    id: `item-${k + offset}`,\n    content: `item ${k + offset}`\n  }));\n}; // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\n * Moves an item from one list to another list.\n */\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'grey',\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: 250\n});\n\nexport default class ToDoListPage extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      items: getItems(10),\n      selected: getItems(5, 10)\n    };\n    this.id2List = {\n      droppable: 'items',\n      droppable2: 'selected'\n    };\n\n    this.getList = id => this.state[this.id2List[id]];\n\n    this.onDragEnd = result => {\n      const {\n        source,\n        destination\n      } = result; // dropped outside the list\n\n      if (!destination) {\n        return;\n      }\n\n      if (source.droppableId === destination.droppableId) {\n        const items = reorder(this.getList(source.droppableId), source.index, destination.index);\n        let state = {\n          items\n        };\n\n        if (source.droppableId === 'droppable2') {\n          state = {\n            selected: items\n          };\n        }\n\n        this.setState(state);\n      } else {\n        const result = move(this.getList(source.droppableId), this.getList(destination.droppableId), source, destination);\n        this.setState({\n          items: result.droppable,\n          selected: result.droppable2\n        });\n      }\n    };\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable\",\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          children: [this.state.items.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: item.id,\n            index: index,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              children: item.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 41\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 33\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable2\",\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          children: [this.state.selected.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: item.id,\n            index: index,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              children: item.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 41\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 33\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this);\n  }\n\n} // Put the things into the DOM!","map":{"version":3,"names":["React","Component","ReactDOM","DragDropContext","Droppable","Draggable","getItems","count","offset","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","ToDoListPage","state","items","selected","id2List","droppable","droppable2","getList","onDragEnd","setState","render","provided","snapshot","innerRef","item","draggableProps","dragHandleProps","style","placeholder"],"sources":["/Users/mateusdavila/Desktop/code/intercambio/front/src/components/toDoList/ToDoListPage.js"],"sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n    Array.from({ length: count }, (v, k) => k).map(k => ({\n        id: `item-${k + offset}`,\n        content: `item ${k + offset}`\n    }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n\n    // change background colour if dragging\n    background: isDragging ? 'lightgreen' : 'grey',\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\n    padding: grid,\n    width: 250\n});\n\nexport default class ToDoListPage extends Component {\n    state = {\n        items: getItems(10),\n        selected: getItems(5, 10)\n    };\n\n    /**\n     * A semi-generic way to handle multiple lists. Matches\n     * the IDs of the droppable container to the names of the\n     * source arrays stored in the state.\n     */\n    id2List = {\n        droppable: 'items',\n        droppable2: 'selected'\n    };\n\n    getList = id => this.state[this.id2List[id]];\n\n    onDragEnd = result => {\n        const { source, destination } = result;\n\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n\n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(\n                this.getList(source.droppableId),\n                source.index,\n                destination.index\n            );\n\n            let state = { items };\n\n            if (source.droppableId === 'droppable2') {\n                state = { selected: items };\n            }\n\n            this.setState(state);\n        } else {\n            const result = move(\n                this.getList(source.droppableId),\n                this.getList(destination.droppableId),\n                source,\n                destination\n            );\n\n            this.setState({\n                items: result.droppable,\n                selected: result.droppable2\n            });\n        }\n    };\n\n    // Normally you would want to split things out into separate components.\n    // But in this example everything is just done in one place for simplicity\n    render() {\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <Droppable droppableId=\"droppable\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}>\n                            {this.state.items.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n                <Droppable droppableId=\"droppable2\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}>\n                            {this.state.selected.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        );\n    }\n}\n\n// Put the things into the DOM!\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}