{"ast":null,"code":"var _jsxFileName = \"/Users/mateusdavila/Desktop/code/intercambio/front/src/components/toDoList/ToDoListPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport Column from \"./Column\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToDoListApp = () => {\n  _s();\n\n  const classes = useStyles();\n  /*\n    TODO: It's really important how you structure your data!!!\n      each column has to have a unique id, each item has to have a unique id and ideally consecutive else funky things happen\n      each droppable has to have a unique id, each draggable also - cannot stress this enough because that is the only way\n      the framework knows how what went from which list\n    */\n\n  const initialColumns = {\n    todo: {\n      id: \"todo\",\n      list: [{\n        id: \"1\",\n        text: \"text1\"\n      }, {\n        id: \"2\",\n        text: \"text2\"\n      }, {\n        id: \"3\",\n        text: \"text3\"\n      }]\n    },\n    doing: {\n      id: \"doing\",\n      list: [{\n        id: \"4\",\n        text: \"text4\"\n      }, {\n        id: \"5\",\n        text: \"text5\"\n      }, {\n        id: \"6\",\n        text: \"text6\"\n      }]\n    },\n    done: {\n      id: \"done\",\n      list: []\n    }\n  };\n  const [columns, setColumns] = useState(initialColumns);\n\n  const onDragEnd = _ref => {\n    let {\n      source,\n      destination\n    } = _ref;\n    // Make sure we have a valid destination\n    if (destination === undefined || destination === null) return null; // Make sure we're actually moving the item\n\n    if (source.droppableId === destination.droppableId && destination.index === source.index) return null; // Set start and end variables\n\n    const start = columns[source.droppableId];\n    const end = columns[destination.droppableId]; // If start is the same as end, we're in the same column\n\n    if (start === end) {\n      // Move the item within the list\n      // Start by making a new list without the dragged item\n      console.log(start);\n      const newList = start.list.filter((_, idx) => idx !== source.index); // Then insert the item at the right location\n\n      newList.splice(destination.index, 0, start.list[source.index]); // Then create a new copy of the column object\n\n      const newCol = {\n        id: start.id,\n        list: newList\n      }; // Update the state\n\n      setColumns(state => ({ ...state,\n        [newCol.id]: newCol\n      }));\n      return null;\n    } else {\n      // If start is different from end, we need to update multiple columns\n      // Filter the start list like before\n      const newStartList = start.list.filter((_, idx) => idx !== source.index); // Create a new start column\n\n      const newStartCol = {\n        id: start.id,\n        list: newStartList\n      }; // Make a new end list array\n\n      const newEndList = end.list; // Insert the item into the end list\n\n      newEndList.splice(destination.index, 0, start.list[source.index]); // Create a new end column\n\n      const newEndCol = {\n        id: end.id,\n        list: newEndList\n      }; // Update the state\n\n      setColumns(state => ({ ...state,\n        [newStartCol.id]: newStartCol,\n        [newEndCol.id]: newEndCol\n      }));\n      return null;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      children: Object.values(columns).map(column => {\n        console.log(column);\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Column, {\n            column: column\n          }, column.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ToDoListApp, \"uK48ifxHj3HRNa8V67C6OZ+ijLE=\", false, function () {\n  return [useStyles];\n});\n\n_c = ToDoListApp;\nexport default ToDoListApp;\nconst useStyles = makeStyles(theme => ({}));\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoListApp\");","map":{"version":3,"names":["React","useState","Grid","makeStyles","DragDropContext","Column","ToDoListApp","classes","useStyles","initialColumns","todo","id","list","text","doing","done","columns","setColumns","onDragEnd","source","destination","undefined","droppableId","index","start","end","console","log","newList","filter","_","idx","splice","newCol","state","newStartList","newStartCol","newEndList","newEndCol","Object","values","map","column","theme"],"sources":["/Users/mateusdavila/Desktop/code/intercambio/front/src/components/toDoList/ToDoListPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport Column from \"./Column\";\n\nconst ToDoListApp = () => {\n  const classes = useStyles();\n  /*\n    TODO: It's really important how you structure your data!!!\n      each column has to have a unique id, each item has to have a unique id and ideally consecutive else funky things happen\n      each droppable has to have a unique id, each draggable also - cannot stress this enough because that is the only way\n      the framework knows how what went from which list\n    */\n  const initialColumns = {\n    todo: {\n      id: \"todo\",\n      list: [\n        { id: \"1\", text: \"text1\" },\n        { id: \"2\", text: \"text2\" },\n        { id: \"3\", text: \"text3\" }\n      ]\n    },\n    doing: {\n      id: \"doing\",\n      list: [\n        { id: \"4\", text: \"text4\" },\n        { id: \"5\", text: \"text5\" },\n        { id: \"6\", text: \"text6\" }\n      ]\n    },\n    done: {\n      id: \"done\",\n      list: []\n    }\n  };\n\n  const [columns, setColumns] = useState(initialColumns);\n\n  const onDragEnd = ({ source, destination }) => {\n    // Make sure we have a valid destination\n    if (destination === undefined || destination === null) return null;\n\n    // Make sure we're actually moving the item\n    if (\n      source.droppableId === destination.droppableId &&\n      destination.index === source.index\n    )\n      return null;\n\n    // Set start and end variables\n    const start = columns[source.droppableId];\n    const end = columns[destination.droppableId];\n\n    // If start is the same as end, we're in the same column\n    if (start === end) {\n      // Move the item within the list\n      // Start by making a new list without the dragged item\n      console.log(start);\n      const newList = start.list.filter((_, idx) => idx !== source.index);\n\n      // Then insert the item at the right location\n      newList.splice(destination.index, 0, start.list[source.index]);\n\n      // Then create a new copy of the column object\n      const newCol = {\n        id: start.id,\n        list: newList\n      };\n\n      // Update the state\n      setColumns((state) => ({ ...state, [newCol.id]: newCol }));\n      return null;\n    } else {\n      // If start is different from end, we need to update multiple columns\n      // Filter the start list like before\n      const newStartList = start.list.filter((_, idx) => idx !== source.index);\n\n      // Create a new start column\n      const newStartCol = {\n        id: start.id,\n        list: newStartList\n      };\n\n      // Make a new end list array\n      const newEndList = end.list;\n\n      // Insert the item into the end list\n      newEndList.splice(destination.index, 0, start.list[source.index]);\n\n      // Create a new end column\n      const newEndCol = {\n        id: end.id,\n        list: newEndList\n      };\n\n      // Update the state\n      setColumns((state) => ({\n        ...state,\n        [newStartCol.id]: newStartCol,\n        [newEndCol.id]: newEndCol\n      }));\n      return null;\n    }\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Grid container direction={\"row\"} justify={\"center\"}>\n        {Object.values(columns).map((column) => {\n          console.log(column);\n          return (\n            <Grid item>\n              <Column column={column} key={column.id} />\n            </Grid>\n          );\n        })}\n      </Grid>\n    </DragDropContext>\n  );\n};\n\nexport default ToDoListApp;\n\nconst useStyles = makeStyles((theme) => ({}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}