{"ast":null,"code":"var _jsxFileName = \"/Users/mateusdavila/Desktop/code/intercambio/front/src/components/toDoList/ToDoListPage.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'; // fake data generator\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getItems = function (count) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const list = [{\n    id: 1,\n    content: 'adsfadsfdf'\n  }];\n}; // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\n * Moves an item from one list to another list.\n */\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'grey',\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: 250\n});\n\nexport default class ToDoListPage extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      items: getItems(10),\n      selected: getItems(5, 10)\n    };\n    this.id2List = {\n      droppable: 'items',\n      droppable2: 'selected'\n    };\n\n    this.getList = id => this.state[this.id2List[id]];\n\n    this.onDragEnd = result => {\n      const {\n        source,\n        destination\n      } = result; // dropped outside the list\n\n      if (!destination) {\n        return;\n      }\n\n      if (source.droppableId === destination.droppableId) {\n        const items = reorder(this.getList(source.droppableId), source.index, destination.index);\n        let state = {\n          items\n        };\n\n        if (source.droppableId === 'droppable2') {\n          state = {\n            selected: items\n          };\n        }\n\n        this.setState(state);\n      } else {\n        const result = move(this.getList(source.droppableId), this.getList(destination.droppableId), source, destination);\n        this.setState({\n          items: result.droppable,\n          selected: result.droppable2\n        });\n      }\n    };\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable\",\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          children: [this.state.items.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: item.id,\n            index: index,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              children: item.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 41\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 33\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable2\",\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          children: [this.state.selected.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: item.id,\n            index: index,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              children: item.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 41\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 33\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this);\n  }\n\n} // Put the things into the DOM!","map":{"version":3,"names":["React","Component","ReactDOM","DragDropContext","Droppable","Draggable","getItems","count","offset","list","id","content","reorder","startIndex","endIndex","result","Array","from","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","ToDoListPage","state","items","selected","id2List","droppable","droppable2","getList","onDragEnd","setState","render","provided","snapshot","innerRef","map","item","draggableProps","dragHandleProps","style","placeholder"],"sources":["/Users/mateusdavila/Desktop/code/intercambio/front/src/components/toDoList/ToDoListPage.js"],"sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// fake data generator\nconst getItems = (count, offset = 0) =>{\n\n    const list = [{id:1, content:'adsfadsfdf'}]\n}\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n\n    // change background colour if dragging\n    background: isDragging ? 'lightgreen' : 'grey',\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\n    padding: grid,\n    width: 250\n});\n\nexport default class ToDoListPage extends Component {\n    state = {\n        items: getItems(10),\n        selected: getItems(5, 10)\n    };\n\n    /**\n     * A semi-generic way to handle multiple lists. Matches\n     * the IDs of the droppable container to the names of the\n     * source arrays stored in the state.\n     */\n    id2List = {\n        droppable: 'items',\n        droppable2: 'selected'\n    };\n\n    getList = id => this.state[this.id2List[id]];\n\n    onDragEnd = result => {\n        const { source, destination } = result;\n\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n\n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(\n                this.getList(source.droppableId),\n                source.index,\n                destination.index\n            );\n\n            let state = { items };\n\n            if (source.droppableId === 'droppable2') {\n                state = { selected: items };\n            }\n\n            this.setState(state);\n        } else {\n            const result = move(\n                this.getList(source.droppableId),\n                this.getList(destination.droppableId),\n                source,\n                destination\n            );\n\n            this.setState({\n                items: result.droppable,\n                selected: result.droppable2\n            });\n        }\n    };\n\n    // Normally you would want to split things out into separate components.\n    // But in this example everything is just done in one place for simplicity\n    render() {\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <Droppable droppableId=\"droppable\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}>\n                            {this.state.items.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n                <Droppable droppableId=\"droppable2\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}>\n                            {this.state.selected.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        );\n    }\n}\n\n// Put the things into the DOM!\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}