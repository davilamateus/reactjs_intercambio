{"ast":null,"code":"var _jsxFileName = \"/Users/mateusdavila/Desktop/code/intercambio/front/src/components/toDoList/ToDoListPage.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport initialData from './initial-data';\nimport Column from './column';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n`;\n_c = Container;\n\nclass ToDoListPage extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = initialData;\n\n    this.onDragEnd = result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      const start = this.state.columns[source.droppableId];\n      const finish = this.state.columns[destination.droppableId];\n\n      if (start === finish) {\n        const newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newColumn = { ...start,\n          taskIds: newTaskIds\n        };\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.setState(newState);\n        return;\n      } // Moving from one list to another\n\n\n      const startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n      const newStart = { ...start,\n        taskIds: startTaskIds\n      };\n      const finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId);\n      const newFinish = { ...finish,\n        taskIds: finishTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      };\n      this.setState(newState);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: this.state.columnOrder.map(columnId => {\n          const column = this.state.columns[columnId];\n          const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n          return /*#__PURE__*/_jsxDEV(Column, {\n            column: column,\n            tasks: tasks\n          }, column.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render( /*#__PURE__*/_jsxDEV(ToDoListPage, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 103,\n  columnNumber: 17\n}, this), rootElement);\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"names":["React","ReactDOM","DragDropContext","styled","initialData","Column","Container","div","ToDoListPage","Component","state","onDragEnd","result","destination","source","draggableId","droppableId","index","start","columns","finish","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","setState","startTaskIds","newStart","finishTaskIds","newFinish","render","columnOrder","map","columnId","column","tasks","taskId","rootElement","document","getElementById"],"sources":["/Users/mateusdavila/Desktop/code/intercambio/front/src/components/toDoList/ToDoListPage.js"],"sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport '@atlaskit/css-reset'\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport styled from 'styled-components'\n\nimport initialData from './initial-data'\nimport Column from './column'\n\nconst Container = styled.div`\n  display: flex;\n`\n\nclass ToDoListPage extends React.Component {\n  state = initialData\n\n  onDragEnd = result => {\n    const { destination, source, draggableId } = result\n\n    if (!destination) {\n      return\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    const start = this.state.columns[source.droppableId]\n    const finish = this.state.columns[destination.droppableId]\n\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds)\n      newTaskIds.splice(source.index, 1)\n      newTaskIds.splice(destination.index, 0, draggableId)\n\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds\n      }\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      }\n\n      this.setState(newState)\n      return\n    }\n\n    // Moving from one list to another\n    const startTaskIds = Array.from(start.taskIds)\n    startTaskIds.splice(source.index, 1)\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    }\n\n    const finishTaskIds = Array.from(finish.taskIds)\n    finishTaskIds.splice(destination.index, 0, draggableId)\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds\n    }\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    }\n    this.setState(newState)\n  }\n\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Container>\n          {this.state.columnOrder.map(columnId => {\n            const column = this.state.columns[columnId]\n            const tasks = column.taskIds.map(\n              taskId => this.state.tasks[taskId]\n            )\n\n            return (\n              <Column key={column.id} column={column} tasks={tasks} />\n            )\n          })}\n        </Container>\n      </DragDropContext>\n    )\n  }\n}\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<ToDoListPage />, rootElement)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}