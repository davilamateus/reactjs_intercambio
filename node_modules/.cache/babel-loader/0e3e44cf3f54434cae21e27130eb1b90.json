{"ast":null,"code":"var _jsxFileName = \"/Users/mateusdavila/Desktop/code/intercambio/front/src/components/toDoList/ToDoListPage.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'; // fake data generator\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getItems = function (count) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Array.from({\n    length: count\n  }, (v, k) => k).map(k => ({\n    id: `item-${k + offset}`,\n    content: `Item: ${k + offset}, Random value: ${Math.round(Math.random() * 100)}`,\n    color: Math.random() > 0.66 ? 'pink' : Math.random() > 0.5 ? 'lightgreen' : 'beige'\n  }));\n}; // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\n * Moves an item from one list to another list.\n */\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nconst grid = 4;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'lightgrey',\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : '#eee',\n  padding: grid,\n  margin: '3px',\n  width: 250\n});\n\nfunction ToDoListPage() {\n  const state = {\n    list1: getItems(5, 1),\n    list2: getItems(4, 6),\n    list3: getItems(6, 10)\n  };\n  /**\n   * A semi-generic way to handle multiple lists. Matches\n   * the IDs of the droppable container to the names of the\n   * source arrays stored in the state.\n   */\n\n  const droppableIds = {\n    droppable1: 'list1',\n    droppable2: 'list2',\n    droppable3: 'list3'\n  };\n\n  const getList = id => this.state[this.droppableIds[id]];\n\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result; // dropped outside the list\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(this.getList(source.droppableId), source.index, destination.index);\n      let copiedState = Object.assign({}, this.state);\n\n      if (source.droppableId === 'droppable1') {\n        copiedState.list1 = items;\n      } else if (source.droppableId === 'droppable2') {\n        copiedState.list2 = items;\n      } else if (source.droppableId === 'droppable3') {\n        copiedState.list3 = items;\n      }\n\n      this.setState(copiedState);\n    } else {\n      const result = move(this.getList(source.droppableId), this.getList(destination.droppableId), source, destination);\n      console.warn('result', result);\n      this.setState({\n        list1: result.droppable1 ? result.droppable1 : this.state.list1,\n        list2: result.droppable2 ? result.droppable2 : this.state.list2,\n        list3: result.droppable3 ? result.droppable3 : this.state.list3\n      });\n    }\n  }; // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n\n  const lists = [{\n    droppableId: 'droppable1',\n    listId: 'list1',\n    title: 'List A'\n  }, {\n    droppableId: 'droppable2',\n    listId: 'list2',\n    title: 'List B'\n  }, {\n    droppableId: 'droppable3',\n    listId: 'list3',\n    title: 'List C'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      children: lists.map((list, listIndex) => /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: list.droppableId,\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: list.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 19\n          }, this), this.state[list.listId] && this.state[list.listId].map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: item.id,\n            index: index,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  background: item.color\n                },\n                children: item.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 27\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 25\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 21\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 17\n        }, this)\n      }, 'list-droppable-' + listIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 7\n  }, this);\n} // Put the things into the DOM!\n\n\n_c = ToDoListPage;\nexport default ToDoListPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoListPage\");","map":{"version":3,"names":["React","Component","ReactDOM","DragDropContext","Droppable","Draggable","getItems","count","offset","Array","from","length","v","k","map","id","content","Math","round","random","color","reorder","list","startIndex","endIndex","result","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","ToDoListPage","state","list1","list2","list3","droppableIds","droppable1","droppable2","droppable3","getList","onDragEnd","items","copiedState","Object","assign","setState","console","warn","lists","listId","title","display","listIndex","provided","snapshot","innerRef","item","draggableProps","dragHandleProps","style","placeholder"],"sources":["/Users/mateusdavila/Desktop/code/intercambio/front/src/components/toDoList/ToDoListPage.js"],"sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k + offset}`,\n    content: `Item: ${k + offset}, Random value: ${Math.round(Math.random() * 100)}`,\n    color: Math.random () > 0.66 ? 'pink': Math.random() > 0.5 ? 'lightgreen' : 'beige'\n  }))\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list)\n  const [removed] = result.splice(startIndex, 1)\n  result.splice(endIndex, 0, removed)\n  return result\n}\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source)\n  const destClone = Array.from(destination)\n  const [removed] = sourceClone.splice(droppableSource.index, 1)\n\n  destClone.splice(droppableDestination.index, 0, removed)\n\n  const result = {}\n  result[droppableSource.droppableId] = sourceClone\n  result[droppableDestination.droppableId] = destClone\n\n  return result\n}\n\nconst grid = 4\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'lightgrey',\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n})\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : '#eee',\n  padding: grid,\n  margin: '3px',\n  width: 250\n})\n\nfunction ToDoListPage() {\n  const state = {\n    list1: getItems(5,1),\n    list2: getItems(4, 6),\n    list3: getItems(6, 10)\n  }\n\n  /**\n   * A semi-generic way to handle multiple lists. Matches\n   * the IDs of the droppable container to the names of the\n   * source arrays stored in the state.\n   */\n  const droppableIds = {\n    droppable1: 'list1',\n    droppable2: 'list2',\n    droppable3: 'list3'\n  }\n\n  const getList = id => this.state[this.droppableIds[id]]\n\n  const onDragEnd = result => {\n    const { source, destination } = result\n\n    // dropped outside the list\n    if (!destination) { return }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        this.getList(source.droppableId),\n        source.index,\n        destination.index\n      )\n\n      let copiedState = Object.assign({}, this.state)\n\n      if (source.droppableId === 'droppable1') {\n        copiedState.list1 = items\n      } else if (source.droppableId === 'droppable2') {\n        copiedState.list2 = items\n      } else if (source.droppableId === 'droppable3') {\n        copiedState.list3 = items\n      }\n\n      this.setState(copiedState)\n    } else {\n      const result = move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination\n      )\n\n      console.warn('result', result)\n      this.setState({\n        list1: result.droppable1 ? result.droppable1 : this.state.list1,\n        list2: result.droppable2 ? result.droppable2 : this.state.list2,\n        list3: result.droppable3 ? result.droppable3 : this.state.list3\n      })\n    }\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n    const lists = [\n      {\n        droppableId: 'droppable1',\n        listId: 'list1',\n        title: 'List A'\n      },\n      {\n        droppableId: 'droppable2',\n        listId: 'list2',\n        title: 'List B'\n      },\n      {\n        droppableId: 'droppable3',\n        listId: 'list3',\n        title: 'List C'\n      },\n    ]\n    return (\n      <div style={{ display: 'flex' }}>\n        <DragDropContext onDragEnd={this.onDragEnd}>\n\n          {lists.map((list, listIndex) =>\n            <Droppable key={'list-droppable-' + listIndex} droppableId={list.droppableId}>\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}>\n                  <h4>\n                    {list.title}\n                  </h4>\n                  {this.state[list.listId] && this.state[list.listId].map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id}\n                      index={index}>\n                      {(provided, snapshot) => (\n                        <div\n                          ref={provided.innerRef}\n                          { ...provided.draggableProps }\n                          { ...provided.dragHandleProps }\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}>\n                          <div style={{ background: item.color }}>\n                            {item.content}\n                          </div>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          )}\n        </DragDropContext>\n      </div>\n    )\n  \n}\n\n// Put the things into the DOM!\nexport default ToDoListPage\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}