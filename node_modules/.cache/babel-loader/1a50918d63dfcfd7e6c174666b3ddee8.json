{"ast":null,"code":"var _jsxFileName = \"/Users/mateusdavila/Desktop/code/intercambio/front/src/components/toDoList/ToDoListPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Column from './components/Column';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport { styled } from './stiches.config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledColumns = styled('div', {\n  display: 'grid',\n  gridTemplateColumns: '1fr 1fr 1fr',\n  margin: '10vh auto',\n  width: '80%',\n  height: '80vh',\n  gap: '8px'\n});\n_c = StyledColumns;\n\nfunction ToDoListPage() {\n  _s();\n\n  const initialColumns = {\n    todo: {\n      id: 'todo',\n      list: ['item 1', 'item 2', 'item 3']\n    },\n    doing: {\n      id: 'doing',\n      list: []\n    },\n    done: {\n      id: 'done',\n      list: []\n    }\n  };\n  const [columns, setColumns] = useState(initialColumns);\n\n  const onDragEnd = _ref => {\n    let {\n      source,\n      destination\n    } = _ref;\n    // Make sure we have a valid destination\n    if (destination === undefined || destination === null) return null; // Make sure we're actually moving the item\n\n    if (source.droppableId === destination.droppableId && destination.index === source.index) return null; // Set start and end variables\n\n    const start = columns[source.droppableId];\n    const end = columns[destination.droppableId]; // If start is the same as end, we're in the same column\n\n    if (start === end) {\n      // Move the item within the list\n      // Start by making a new list without the dragged item\n      const newList = start.list.filter((_, idx) => idx !== source.index); // Then insert the item at the right location\n\n      newList.splice(destination.index, 0, start.list[source.index]); // Then create a new copy of the column object\n\n      const newCol = {\n        id: start.id,\n        list: newList\n      }; // Update the state\n\n      setColumns(state => ({ ...state,\n        [newCol.id]: newCol\n      }));\n      return null;\n    } else {\n      // If start is different from end, we need to update multiple columns\n      // Filter the start list like before\n      const newStartList = start.list.filter((_, idx) => idx !== source.index); // Create a new start column\n\n      const newStartCol = {\n        id: start.id,\n        list: newStartList\n      }; // Make a new end list array\n\n      const newEndList = end.list; // Insert the item into the end list\n\n      newEndList.splice(destination.index, 0, start.list[source.index]); // Create a new end column\n\n      const newEndCol = {\n        id: end.id,\n        list: newEndList\n      }; // Update the state\n\n      setColumns(state => ({ ...state,\n        [newStartCol.id]: newStartCol,\n        [newEndCol.id]: newEndCol\n      }));\n      return null;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(StyledColumns, {\n      children: Object.values(columns).map(col => /*#__PURE__*/_jsxDEV(Column, {\n        col: col\n      }, col.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ToDoListPage, \"NRsKYLNQK79YL22+zswPtdaKbBo=\");\n\n_c2 = ToDoListPage;\nexport default ToDoListPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledColumns\");\n$RefreshReg$(_c2, \"ToDoListPage\");","map":{"version":3,"names":["React","useState","Column","DragDropContext","DropResult","styled","StyledColumns","display","gridTemplateColumns","margin","width","height","gap","ToDoListPage","initialColumns","todo","id","list","doing","done","columns","setColumns","onDragEnd","source","destination","undefined","droppableId","index","start","end","newList","filter","_","idx","splice","newCol","state","newStartList","newStartCol","newEndList","newEndCol","Object","values","map","col"],"sources":["/Users/mateusdavila/Desktop/code/intercambio/front/src/components/toDoList/ToDoListPage.js"],"sourcesContent":["import React, { useState } from 'react'\nimport Column from './components/Column'\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd'\nimport { styled } from './stiches.config'\n\nconst StyledColumns = styled('div', {\n  display: 'grid',\n  gridTemplateColumns: '1fr 1fr 1fr',\n  margin: '10vh auto',\n  width: '80%',\n  height: '80vh',\n  gap: '8px'\n})\n\nfunction ToDoListPage () {\n  const initialColumns = {\n    todo: {\n      id: 'todo',\n      list: ['item 1', 'item 2', 'item 3']\n    },\n    doing: {\n      id: 'doing',\n      list: []\n    },\n    done: {\n      id: 'done',\n      list: []\n    }\n  }\n  const [columns, setColumns] = useState(initialColumns)\n\n  const onDragEnd = ({ source, destination }: DropResult) => {\n    // Make sure we have a valid destination\n    if (destination === undefined || destination === null) return null\n\n    // Make sure we're actually moving the item\n    if (\n      source.droppableId === destination.droppableId &&\n      destination.index === source.index\n    )\n      return null\n\n    // Set start and end variables\n    const start = columns[source.droppableId]\n    const end = columns[destination.droppableId]\n\n    // If start is the same as end, we're in the same column\n    if (start === end) {\n      // Move the item within the list\n      // Start by making a new list without the dragged item\n      const newList = start.list.filter(\n        (_: any, idx: number) => idx !== source.index\n      )\n\n      // Then insert the item at the right location\n      newList.splice(destination.index, 0, start.list[source.index])\n\n      // Then create a new copy of the column object\n      const newCol = {\n        id: start.id,\n        list: newList\n      }\n\n      // Update the state\n      setColumns(state => ({ ...state, [newCol.id]: newCol }))\n      return null\n    } else {\n      // If start is different from end, we need to update multiple columns\n      // Filter the start list like before\n      const newStartList = start.list.filter(\n        (_: any, idx: number) => idx !== source.index\n      )\n\n      // Create a new start column\n      const newStartCol = {\n        id: start.id,\n        list: newStartList\n      }\n\n      // Make a new end list array\n      const newEndList = end.list\n\n      // Insert the item into the end list\n      newEndList.splice(destination.index, 0, start.list[source.index])\n\n      // Create a new end column\n      const newEndCol = {\n        id: end.id,\n        list: newEndList\n      }\n\n      // Update the state\n      setColumns(state => ({\n        ...state,\n        [newStartCol.id]: newStartCol,\n        [newEndCol.id]: newEndCol\n      }))\n      return null\n    }\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <StyledColumns>\n        {Object.values(columns).map(col => (\n          <Column col={col} key={col.id} />\n        ))}\n      </StyledColumns>\n    </DragDropContext>\n  )\n}\n\nexport default ToDoListPage\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}